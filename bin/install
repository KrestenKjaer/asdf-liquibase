#!/usr/bin/env bash

readonly TMP_DOWNLOAD_DIR="$(mktemp -d -t "liquibase_XXXXXX")"

install () {
  local -r install_type="$1"
  local -r version="$2"
  local -r install_path="$3"

  local -r download_url="$(get_download_url "${version}")"
  local -r download_path="${TMP_DOWNLOAD_DIR}/$(get_filename "${version}")"

  echo "Downloading liquibase version ${version} from ${download_url}"
  if curl -Lfs "${download_url}" -o "${download_path}"; then
    echo "Cleaning liquibase previous binaries"
    rm -rf "${install_path}"

    echo "Creating liquibase bin directory"
    mkdir -p "${install_path}"

    echo "Extracting liquibase archive"
    tar zxf "${download_path}" -C "${install_path}"
    mkdir -p "${install_path}/bin/"
    ln -sfv "${install_path}/liquibase" "${install_path}/bin/liquibase"

    echo "Installing missing dependencies"
    echo "-> slf4j-api"
    curl -Lfs http://central.maven.org/maven2/org/slf4j/slf4j-api/1.7.28/slf4j-api-1.7.28.jar -o "${install_path}/lib/slf4j-api-1.7.25.jar"
    echo "-> Postgres jdbc driver"
    curl -Lfs https://jdbc.postgresql.org/download/postgresql-42.2.8.jar -o "${install_path}/lib/postgresql-42.2.5.jar"
  else
    echo "Error: liquibase version ${version} not found" >&2
    exit 1
  fi
}

get_arch () {
  uname | tr '[:upper:]' '[:lower:]'
}

get_filename () {
  local -r version="$1"
  local -r platform="$(get_arch)"
  echo "liquibase-${version}-bin.tar.gz"
}

get_download_url () {
  local -r version="$1"
  local -r filename="$(get_filename "${version}")"
  echo "https://github.com/liquibase/liquibase/releases/download/${version}/${filename}"
}

install "${ASDF_INSTALL_TYPE}" "${ASDF_INSTALL_VERSION}" "${ASDF_INSTALL_PATH}"
